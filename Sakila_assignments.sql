-- LEVEL 1
-- 1.Write a SQL query to return the first and last names of all actors in the database
SELECT
	a.first_name ,
	a.last_name
FROM
	actor a;
-- 2.Write a SQL query to return the titles of all films in the database, along with their rental rates and replacement costs.
SELECT
	f.title ,
	f.rental_rate ,
	f.replacement_cost
FROM
	film f;
-- 3.Write a SQL query to return the top 5 most rented films in the database, along with the number of times they have been rented.
SELECT
	f.title ,
	count(*)
FROM
	rental r
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
GROUP BY
	f.film_id ,
	f.title ;
-- 4.Write a SQL query to return the average rental duration for each category of film in the database
SELECT
	c.name,
	avg(f.rental_duration)
FROM
	category c
INNER JOIN film_category fc ON
	c.category_id = fc.category_id
INNER JOIN film f ON
	fc.film_id = f.film_id
GROUP BY
	c.name;

-- 5.Write a SQL query to return the names and addresses of all customers who have rented a film in the month of May 2005.
SELECT
	concat(c.first_name, ' ', c.last_name) AS names,
	(
	SELECT
		a.address
	FROM
		address a
	WHERE
		a.address_id = c.address_id 
) AS addresses
FROM
	customer c
WHERE
	c.customer_id IN (
	SELECT
		customer_id
	FROM
		rental r
	WHERE
		MONTH(r.rental_date) = 5
			AND YEAR(r.rental_date) = 2005
		GROUP BY
			r.customer_id 
) ;

-- 6. Write a SQL query to return the revenue generated by each store in the database for the year 2005.
SELECT
	a.address ,
	sum(p.amount)
FROM
	payment p
INNER JOIN rental r ON
	p.rental_id = r.rental_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN store s ON
	i.store_id = s.store_id
INNER JOIN address a ON
	s.address_id = a.address_id
WHERE
	YEAR(p.payment_date) = 2005
GROUP BY
	a.address ;

-- 7. Write a SQL query to return the names of all actors who have appeared in more than 20 films in the database.
SELECT
	a.actor_id,
	concat(a.first_name, ' ', a.last_name ) AS full_name
FROM
	actor a
INNER JOIN film_actor fa ON
	a.actor_id = fa.actor_id
GROUP BY
	a.actor_id
HAVING
	count(fa.film_id) > 20;

-- 8. Write a SQL query to return the titles of all films in the database that have a rating of 'PG-13' and a length of more than 120 minutes.
SELECT
	f.title
FROM
	film f
WHERE
	f.rating = 'PG-13'
	AND f.length > 120;

-- LEVEL 2
-- 1. Write a SQL query to return the top 10 customers who have generated the most revenue for the store, including their names and total revenue generated.
SELECT
	concat(c.first_name, ' ', c.last_name) AS full_name,
	sum(p.amount) AS total_revenue_generated
FROM
	rental r
INNER JOIN customer c ON
	r.customer_id = c.customer_id
INNER JOIN payment p ON
	r.rental_id = p.rental_id
GROUP BY
	c.customer_id
ORDER BY
	total_revenue_generated DESC
LIMIT 10;

-- 2. Write a SQL query to return the names and contact information of all customers who have rented films in all categories in the database.
SELECT
	c.customer_id ,
	concat(c.first_name, ' ', c.last_name) AS full_name,
	c.email
FROM
	rental r
INNER JOIN customer c ON
	r.customer_id = c.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id
GROUP BY
	c.customer_id ,
	c2.category_id
HAVING
	count(c2.category_id) > (
	SELECT
		count(*)
	FROM
		category c3);
	
-- 3. Write a SQL query to return the titles of all films in the database that have been rented at least once but never returned.
SELECT
	f.title
FROM
	film f
INNER JOIN inventory i ON
	f.film_id = i.film_id
INNER JOIN rental r ON
	i.inventory_id = r.inventory_id
WHERE
	r.return_date IS NULL
GROUP BY
	f.film_id ,
	f.title ;


-- 4. Write a SQL query to return the names of all actors who have appeared in at least one film in each category in the database.
SELECT
	c.name,
	a.actor_id,
	concat(a.first_name, ' ', a.last_name) AS full_name
FROM
	actor a
INNER JOIN film_actor fa ON
	a.actor_id = fa.actor_id
INNER JOIN film f ON
	fa.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c ON
	fc.category_id = c.category_id
GROUP BY
	c.name,
	a.actor_id
ORDER BY
	c.name;

-- 5. Write a SQL query to return the names of all customers who have rented the same film more than once in a single transaction, along with the number of times they rented it.
SELECT
	c.customer_id ,
	concat(c.first_name, ' ', c.last_name) AS full_name,
	f.title ,
	count(*) AS number_of_times
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
GROUP BY
	c.customer_id ,
	f.film_id ,
	f.title
HAVING
	count(*) > 1;

-- 6. Write a SQL query to return the total revenue generated by each actor in the database, based on the rental fees of the films they have appeared in.
SELECT
	concat(a.first_name, ' ', a.last_name) AS full_name,
	sum(p.amount) AS total_revenue
FROM
	payment p
INNER JOIN rental r ON
	p.rental_id = r.rental_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_actor fa ON
	f.film_id = fa.film_id
INNER JOIN actor a ON
	fa.actor_id = a.actor_id
GROUP BY
	a.actor_id
ORDER BY
	total_revenue DESC;

-- 7. Write a SQL query to return the names of all actors who have appeared in at least one film with a rating of 'R', but have never appeared in a film with a rating of 'G'.
(
SELECT
	a.actor_id,
	concat(a.first_name, ' ', a.last_name) AS full_name
FROM
	actor a
INNER JOIN film_actor fa ON
	a.actor_id = fa.actor_id
INNER JOIN film f ON
	fa.film_id = f.film_id
WHERE
	f.rating = 'R')
EXCEPT 
(
SELECT
a.actor_id ,
concat(a.first_name, ' ', a.last_name) AS full_name
FROM
actor a
INNER JOIN film_actor fa ON
a.actor_id = fa.actor_id
INNER JOIN film f ON
fa.film_id = f.film_id
WHERE
f.rating = 'G'
)

-- 8. Write a SQL query to return the titles of all films in the database that have been rented by more than 50 customers, but have never been rented by the same customer more than once.
(
SELECT
	f.title
FROM
	film f
INNER JOIN inventory i ON
	f.film_id = i.film_id
INNER JOIN rental r ON
	i.inventory_id = r.inventory_id
INNER JOIN customer c ON
	r.customer_id = c.customer_id
GROUP BY
	f.film_id ,
	f.title
HAVING
	count(DISTINCT c.customer_id) > 30)

EXCEPT 

(
SELECT
f.title
FROM
film f
INNER JOIN inventory i ON
f.film_id = i.film_id
INNER JOIN rental r ON
i.inventory_id = r.inventory_id
INNER JOIN customer c ON
r.customer_id = c.customer_id
GROUP BY
f.film_id ,
f.title ,
c.customer_id
HAVING
count(*) > 1)

-- 9. Write a SQL query to return the names of all customers who have rented a film from a category they have never rented from before.
SELECT
	concat(c.first_name, ' ', c.last_name) AS full_name,
	c2.category_id
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id
GROUP BY
	c.customer_id ,
	c2.category_id
HAVING
	count(*) = 1;

-- 10. Write a SQL query to return the titles of all films in the database that have been rented by every customer who has ever rented a film from the 'Action' category.-----------------------------------------------------------------------
WITH customers_rented_action_movies AS (
SELECT
	c.customer_id ,
	concat(c.first_name, ' ', c.last_name) AS full_name
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id
WHERE
	c2.name = 'Action'
GROUP BY
	c.customer_id)
,
customer_of_each_film AS (
SELECT
	f.film_id AS film_id ,
	f.title ,
	c.customer_id
FROM
	film f
INNER JOIN inventory i ON
	f.film_id = i.film_id
INNER JOIN rental r ON
	i.inventory_id = r.inventory_id
INNER JOIN customer c ON
	r.customer_id = c.customer_id
GROUP BY
	f.film_id,
	f.title ,
	c.customer_id )

SELECT
	f.title
FROM
	film f
WHERE
	NOT EXISTS ((
	SELECT
		customers_rented_action_movies.customer_id
	FROM
		customers_rented_action_movies)
EXCEPT
(
SELECT
	customer_of_each_film.customer_id
FROM
	customer_of_each_film
WHERE
	f.film_id = customer_of_each_film.film_id));


-- LEVEL 3
-- 1. Write a SQL query to return the average rental duration for each combination of actor and category in the database, excluding actors who have not appeared in any films in a category.
SELECT
	concat(a.first_name, ' ', a.last_name) AS actor_name ,
	c.name AS category,
	avg(datediff(r.return_date , r.rental_date)) AS avg_rent_time_in_hours
FROM
	rental r
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_actor fa ON
	f.film_id = fa.film_id
INNER JOIN actor a ON
	fa.actor_id = a.actor_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c ON
	fc.category_id = c.category_id
WHERE
	r.return_date IS NOT NULL
GROUP BY
	a.actor_id ,
	c.category_id
ORDER BY
	avg_rent_time_in_hours DESC; 

-- 2. Write a SQL query to return the names of all actors who have appeared in a film with a rating of 'R' and a length of more than 2 hours, but have never appeared in a film with a rating of 'G'.
(
SELECT
	a.actor_id,
	concat(a.first_name, ' ', a.last_name) AS full_name
FROM
	actor a
INNER JOIN film_actor fa ON
	a.actor_id = fa.actor_id
INNER JOIN film f ON
	fa.film_id = f.film_id
WHERE
	f.rating = 'R' AND f.LENGTH > 120)
EXCEPT 
(
SELECT
a.actor_id ,
concat(a.first_name, ' ', a.last_name) AS full_name
FROM
actor a
INNER JOIN film_actor fa ON
a.actor_id = fa.actor_id
INNER JOIN film f ON
fa.film_id = f.film_id
WHERE
f.rating = 'G'
)

-- 3. Write a SQL query to return the names of all customers who have rented more than 5 films in a single day, along with the number of films they rented and the total rental fee. ------------------------------------------------------------------------------------
SELECT
	concat(c.first_name, ' ', c.last_name) AS full_name,
	DATE(r.rental_date),
	count(*) AS number_films
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
GROUP BY
	c.customer_id ,
	DATE(r.rental_date)
HAVING
	count(*) > 5;


-- 4. Write a SQL query to return the names of all customers who have rented every film in a category//, along with the total number of films rented and the total rental fee.
WITH movie_by_category_customer AS (
SELECT
	c2.category_id ,
	c2.name ,
	c.customer_id ,
	f.film_id
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id
GROUP BY
	c2.category_id ,
	c2.name ,
	c.customer_id ,
	f.film_id
ORDER BY
	c2.category_id ,
	c2.name ,
	c.customer_id ,
	f.film_id)
,
movie_by_category AS (
SELECT
	c.category_id ,
	c.name ,
	f.film_id
FROM
	category c
INNER JOIN film_category fc ON
	c.category_id = fc.category_id
INNER JOIN film f ON
	fc.film_id = f.film_id
GROUP BY
	c.category_id ,
	c.name,
	f.film_id ) 

SELECT
	c2.category_id ,
	c.customer_id
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id
GROUP BY
	c2.category_id ,
	c.customer_id
HAVING
	NOT EXISTS ((
	SELECT
		movie_by_category.film_id
	FROM
		movie_by_category
	WHERE
		movie_by_category.category_id = c2.category_id)
EXCEPT 
(
SELECT
	movie_by_category_customer.film_id
FROM
	movie_by_category_customer
WHERE
	movie_by_category_customer.category_id = c2.category_id
	AND movie_by_category_customer.customer_id = c.customer_id))
	
-- 5. Write a SQL query to return the titles of all films in the database that have been rented by the same customer more than once in a single day, along with the names of the customers who rented them and the number of times they were rented.
SELECT
	concat(c.first_name, ' ', c.last_name) AS full_name,
	date(r.rental_date) AS date_of_renting,
	f.title ,
	count(*) AS number_of_times_renting
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
GROUP BY
	c.customer_id,
	date(r.rental_date),
	f.film_id
HAVING
	count(*) > 1;
	
	
-- 6. Write a SQL query to return the names of all actors who have appeared in at least one film with every other actor in the database, along with the number of films they appeared in together.
SELECT
	fa1.actor_id ,
	count(DISTINCT fa1.film_id) AS number_of_film_they_appear_in
FROM
	film_actor fa1
INNER JOIN film_actor fa2 ON
	fa1.film_id = fa2.film_id
GROUP BY
	fa1.actor_id
HAVING
	count(DISTINCT fa2.actor_id) = (
	SELECT
		count(*)
	FROM
		actor a );
	
-- 7. Write a SQL query to return the names of all customers who have rented at least one film from each category in the database, along with the number of films rented from each category.
WITH temp_table AS (
SELECT
	c.customer_id,
	c2.category_id,
	concat(c.first_name, ' ', c.last_name) AS full_name,
	c2.name AS category
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id )
,
customer_result AS (
SELECT
	temp_table.customer_id
FROM
	temp_table
GROUP BY
	temp_table.customer_id
HAVING
	count(DISTINCT temp_table.category_id) = (
	SELECT
		count(*)
	FROM
		category c ))

SELECT
	temp_table.full_name,
	temp_table.category,
	count(*) AS number_of_rented_films
FROM
	temp_table
GROUP BY
	temp_table.customer_id,
	temp_table.category_id
HAVING
	temp_table.customer_id IN (
	SELECT
		*
	FROM
		customer_result)
ORDER BY
	temp_table.customer_id;

-- 8. Write a SQL query to return the titles of all films in the database that have been rented more than 30 times, but have never been rented by any customer who has rented a film with a rating of 'G'.
WITH tmp_1 AS (
SELECT
	f.film_id ,
	f.title ,
	count(*) AS number_of_rent
FROM
	film f
INNER JOIN inventory i ON
	f.film_id = i.film_id
INNER JOIN rental r ON
	i.inventory_id = r.inventory_id
GROUP BY
	f.film_id
HAVING
	count(*) > 30)

, 

tmp_2 AS (
SELECT
	f.film_id
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
WHERE
	c.customer_id IN (
	SELECT
		c.customer_id
	FROM
		customer c
	INNER JOIN rental r ON
		c.customer_id = r.customer_id
	INNER JOIN inventory i ON
		r.inventory_id = i.inventory_id
	INNER JOIN film f ON
		i.film_id = f.film_id
	WHERE
		f.rating = 'G'
	GROUP BY
		c.customer_id 
)
GROUP BY
	f.film_id )

SELECT
	*
FROM
	tmp_1
WHERE
	tmp_1.film_id IN ((
	SELECT
		film_id
	FROM
		tmp_1)
EXCEPT (
SELECT
	*
FROM
	tmp_2));


-- 9. Write a SQL query to return the names of all customers who have rented a film from a category they have never rented from before, and have also never rented a film longer than 3 hours.
(
SELECT
	c.customer_id
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id
GROUP BY
	c.customer_id ,
	c2.category_id
HAVING
	count(*) = 1)
	
INTERSECT 
	
(
SELECT
	c.customer_id
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
WHERE
	HOUR(timediff(r.return_date , r.rental_date)) <= 3
GROUP BY
	c.customer_id
ORDER BY
	c.customer_id )
	
-- 10. Write a SQL query to return the names of all actors who have appeared in a film with a rating of 'PG-13' and a length of more than 2 hours, and have also appeared in a film with a rating of 'R' and a length of less than 90 minutes.

(
SELECT
	a.actor_id,
	concat(a.first_name, ' ', a.last_name) AS full_name
FROM
	actor a
INNER JOIN film_actor fa ON
	a.actor_id = fa.actor_id
INNER JOIN film f ON
	fa.film_id = f.film_id
WHERE
	f.rating = 'PG-13'
	AND f.LENGTH > 120
GROUP BY
	a.actor_id
)
INTERSECT 
(
SELECT
a.actor_id,
concat(a.first_name, ' ', a.last_name) AS full_name
FROM
actor a
INNER JOIN film_actor fa ON
a.actor_id = fa.actor_id
INNER JOIN film f ON
fa.film_id = f.film_id
WHERE
f.rating = 'R'
AND f.LENGTH < 90
GROUP BY
a.actor_id	
)
ORDER BY
actor_id;

-- LEVEL 4
-- 1. Write a SQL query to update the rental rate of all films in the database that have been rented more than 30 times, setting the new rental rate to be 10% higher than the current rate.

-- using CTE
WITH film_more_30times_rented AS (
SELECT
	f2.film_id
FROM
	film f2
INNER JOIN inventory i ON
	f2.film_id = i.film_id
INNER JOIN rental r ON
	i.inventory_id = r.inventory_id
GROUP BY
	f2.film_id
HAVING
	count(*) > 30)

UPDATE
	film
SET
	film.rental_rate = 1.1 * film.rental_rate
WHERE
	film.film_id IN (
	SELECT
		*
	FROM
		film_more_30times_rented);
	
-- using INNER JOIN

-- 2. Write a SQL query to update the rental duration of all films in the database that have been rented more than 20 times, setting the new duration to be 5% longer than the current duration.
WITH film_rented_more_tham_5_times AS
(
SELECT
	f.film_id
FROM
	film f
INNER JOIN inventory i ON
	f.film_id = i.film_id
INNER JOIN rental r ON
	i.inventory_id = r.inventory_id
GROUP BY
	f.film_id
HAVING
	count(*) > 20
)

UPDATE
	film f
SET
	f.rental_duration = 1.05 * f.rental_duration
WHERE
	f.film_id IN (
	SELECT
		*
	FROM
		film_rented_more_tham_5_times
	);

-- 3. Write a SQL query to update the rental rate of all films in the 'Action' category that were released before the year 2007, setting the new rate to be 20% higher than the current rate.
WITH action_movie_release_before_2005 AS (
SELECT
	f.film_id
FROM
	film f
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c ON
	fc.category_id = c.category_id
WHERE
	c.name = 'Action'
	AND f.release_year < 2007
GROUP BY
	f.film_id 
)

UPDATE
	film f
SET
	f.rental_rate = 1.2 * f.rental_rate
WHERE
	f.film_id IN (
	SELECT
		*
	FROM
		action_movie_release_before_2005);
	
-- 4. Write a SQL query to update the email address of all customers who have rented a film from the 'Horror' category in the month of October 2022, setting the new email address to be a combination of their current email address and the string 'horrorlover'.
-- change data type of column 'email' for enough CHARACTER 
ALTER TABLE customer 
MODIFY COLUMN email varchar(100);

WITH horrorlover_customers AS (
SELECT
	c.customer_id
FROM
	customer c
INNER JOIN rental r ON
	c.customer_id = r.customer_id
INNER JOIN inventory i ON
	r.inventory_id = i.inventory_id
INNER JOIN film f ON
	i.film_id = f.film_id
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c2 ON
	fc.category_id = c2.category_id
WHERE
	c2.name = 'Horror'
GROUP BY
	c.customer_id 
)

UPDATE
	customer c
SET
	c.email = concat(c.email, 'horrorlover')
WHERE
	c.customer_id IN (
	SELECT
		*
	FROM
		horrorlover_customers);
	
-- 5. Write a SQL query to update the rental rate of all films in the database that have been rented by more than 30 customers, setting the new rate to be 5% higher than the current rate, but not higher than $4.00.
WITH film_rented_by_more_than_30_customer AS (
SELECT
	f.film_id
FROM
	film f
INNER JOIN inventory i ON
	f.film_id = i.film_id
INNER JOIN rental r ON
	i.inventory_id = r.inventory_id
INNER JOIN customer c ON
	r.customer_id = c.customer_id
GROUP BY
	f.film_id
HAVING
	count(DISTINCT c.customer_id) > 30
)

UPDATE
	film f
SET
	f.rental_rate = (CASE
		WHEN 1.05 * f.rental_rate < 4.00 THEN 1.05 * f.rental_rate
		ELSE 4.00
	END
)
WHERE
	f.film_id IN (
	SELECT
		*
	FROM
		film_rented_by_more_than_30_customer);

	
-- 6. Write a SQL query to update the rental rate of all films in the database that have a rating of 'PG-13' and a length of more than 2 hours, setting the new rate to be $3.50.
WITH film_group AS (
SELECT
	f.film_id
FROM
	film f
WHERE
	f.rating = 'PG-13'
	AND f.LENGTH > 120
)

UPDATE
	film f
SET
	f.rental_rate = 3.50
WHERE
	f.film_id IN (
	SELECT
		*
	FROM
		film_group);
	
-- 7. Write a SQL query to update the rental duration of all films in the 'Sci-Fi' category that were released in the year 2006, setting the new duration to be equal to the length of the film in minutes.
	
WITH film_group AS (
SELECT
	f.film_id
FROM
	film f
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c ON
	fc.category_id = c.category_id
WHERE
	c.name = 'Sci-Fi'
	AND f.release_year = 2006
GROUP BY
	f.film_id 
)

UPDATE
	film f
SET
	f.rental_duration = f.`length`
WHERE
	f.film_id IN (
	SELECT
		*
	FROM
		film_group);
	
-- 8. Write a SQL query to update the address of all customers who live in the same city as another customer with the same last name, setting the new address to be the concatenation of their current address and the string 'samecity'.
WITH customer_group AS 
(
SELECT
	tb1.customer_id
FROM
	(
	SELECT
		c.customer_id,
		c.last_name,
		a.city_id
	FROM
		customer c
	INNER JOIN address a ON
		c.address_id = a.address_id) AS tb1
INNER JOIN 
(
	SELECT
		c.customer_id,
		c.last_name,
		a.city_id
	FROM
		customer c
	INNER JOIN address a ON
		c.address_id = a.address_id) AS tb2 ON
	(tb1.customer_id != tb2.customer_id
		AND tb1.last_name = tb2.last_name
		AND tb1.city_id = tb2.city_id)
)

-- 9. Write a SQL query to update the rental rate of all films in the 'Comedy' category that were released in the year 2006 or later, setting the new rate to be 15% lower than the current rate.
WITH film_group AS (
SELECT
	f.film_id
FROM
	film f
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c ON
	fc.category_id = c.category_id
WHERE
	c.name = 'Comedy'
	AND f.release_year >= 2006
)

UPDATE
	film f
SET
	f.rental_rate = 0.85 * f.rental_rate
WHERE
	f.film_id IN (
	SELECT
		*
	FROM
		film_group);

	
-- 10. Write a SQL query to update the rental rate of all films in the database that have a rating of 'G' and a length of less than 1 hour, setting the new rate to be $1.50.
WITH film_group AS (
SELECT
	f.film_id
FROM
	film f
INNER JOIN film_category fc ON
	f.film_id = fc.film_id
INNER JOIN category c ON
	fc.category_id = c.category_id
WHERE
	f.rating = 'G'
	AND f.`length` < 60
)

UPDATE
	film f
SET
	f.rental_rate = 1.50
WHERE
	f.film_id IN (
	SELECT
		*
	FROM
		film_group);
	
	









